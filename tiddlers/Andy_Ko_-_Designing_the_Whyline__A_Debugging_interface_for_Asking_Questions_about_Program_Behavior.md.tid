created: 20170103181437154
modified: 20170103184630258
tags: paper HCI
title: Andy Ko - Designing the Whyline: A Debugging interface for Asking Questions about Program Behavior
type: text/x-markdown

* interrogative debugging
  * alternative to printf, breakpoint debugging
  * ask why did/why didn't questions
  * false propositions (programmer assumption is false. it ran/didn't run)
  * invariant (always runs/doesn't)
  * data & control flow (runtime actions caused it)

* on question, highlight related code
* present objects in "why" menu. puts the parts bucket on the floor
* makes asking these questions easier by externalizing the questions

###References:

1. Auguston, M., Jeffery, C., and Underwood, S. A framework for automatic debugging, IEEE International Conference on Automated Software Engineering, 2002, Edinburgh, UK, 217-222. 
4. Davies, S.P., Models and theories of programming strategy. International Journal of Man-Machine Studies, (39), 1993, 236-267. 
6. Gestwicki, P. and Jayaraman, B. Interactive visualization of java programs, IEEE Symposia on Human-Centric Computing Languages and Environments, 2002, Arlington, VA, 226-235.
7. Gilmore, D.J., Models of debugging. Acta Psychologica, (78), 1992, 151-173. 
9. Green, T.R.G. and Petre, M., Usability analysis of visual programming environments: A 'cognitive dimensions' framework. Journal of Visual Languages and Computing, 7, 1996, 131-174.
14. Lieberman, H., The debugging scandal and what to do about it. Communications of the ACM, 40(4), 1997, 26-78. 
15. Mayrhauser, A.v. and Vans, A.M. Program understanding behavior during debugging of large scale software, Empirical Studies of Programmers, 7th Workshop, 1997, Alexandria, VA, 157-179.
17. Romero, P., et al., A survey of external representations employed in object-oriented programming environments. Journal of Visual Languages and Computing, 14, 2003, 387-419. 
18. Rothermel, G., Harrold, M.J., and Dedhia, J., Regression test selection for c++ software. Software Testing, Verification & Reliability, 10(2), 2000, 77-109. 
20. Tip, F., A survey of programming slicing techniques. Journal of Programming Languages, 3, 1995, 121-189.
21. Zeller, A. Isolating cause-effect chains from computer programs, International Symposium on the Foundations of Software Engineering, 2002, Charleston, SC, 1-10. 
22. Zhang, X. and Zhang, Y. Precise dynamic slicing algorithms, International Conference on Software Engineering, 2003, Portland, OR, 319-329. 
