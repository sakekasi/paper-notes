created: 20160909160801527
modified: 20160914161219635
tags: paper [[related work]]
title: Sean McDirmid - Usable Live Programming
type: text/x-markdown

## [*Usable Live Programming*](https://www.mendeley.com/viewer/?fileId=4760ec06-d3de-60fb-7672-f464eb929086&documentId=d2b39cc6-5b66-38a9-b3e5-3824d35e2a64)

using probes and traces to visualize incrementally parsed, compiled and executed abstract programs

make programming more fluid

REPLS -> fix-and-continue

```
while (true) 
  ClearScreen();
  Render();
def Render() = draw('hello world');
```

probing - projecting values into code based on a code position

Inserting '`@`' is an elegant way to sidestep having to keep close track of probes

It makes sense to only want to see probed values when modifying mostly written code. In that case, abstract > concrete. But, when we're writing from scratch, we want to see everything and manipulate concrete values. Also, developing programs is not 0-100. You don't either know nothing or know exactly what you're gonna say. You can be 50% sure of what you're gonna do, and in that case, mud is really useful to work out the details.

what is '`bpi`'?

There's some magic going on in these examples. Less planning is necessary, and the tightrope is wider. But, I have to write things in a certain way to take advantage of that liveness

!!! Everything's incremental

## REFERENCES
* [J.H. Maloney and R.B. Smith. - *Directness and liveness in the Morphic user interface construction environment*. 1995](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.600&rep=rep1&type=pdf)
* [U. A. Acar. - *Self-adjusting computation: (an overview)*. 2009](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.114.7647&rep=rep1&type=pdf)